[
["index.html", "Data Analytics as a Service (DAaaS): Automated &amp; Intelligent Imputation Methods for Supervised Machine Learning Introduction Problem Statement Research Purpose", " Data Analytics as a Service (DAaaS): Automated &amp; Intelligent Imputation Methods for Supervised Machine Learning Shahid Barkat, Joseph Kearney June, 2019 Introduction The researchers develop and maintain an open-source, Python-based package named Autoimpute to address one of the most common nuisances in machine learning – datasets with missing values. The package implements numerous imputation algorithms and extends common supervised machine learning methods to handle multiply imputed datasets. Autoimpute treats missing data as a first-class citizen in the Python world, making imputation familiar to Python developers and easy to use for those new to the language. Ultimately, the package provides users an end-to-end framework that covers missing data exploration to imputation analysis. Problem Statement Machine learning models rely entirely on the data they are provided, and most require that the underlying dataset be complete. In reality, however, many real-world datasets are incomplete, containing missing values for the response variable and one or more of the features collected. As a result, the machine learning practitioner must decide what to do about missing data. The way in which the practitioner handles missing data greatly affects the interpretability of and results from the machine learning models the practitioner builds and deploys. The challenge of handling missing data has inspired numerous imputation methods, each of which has its advantages and disadvantages depending on the nature of the missing data and the machine learning task at hand. Unfortunately, the existence of multiple imputation methods does not get the machine learning practitioner any closer to handling missing data. First, imputation methods can be challenging to understand and computationally expensive to implement. Next, no global criteria or metric exists to select the optimal imputation method given a dataset with missing values. Even if a practitioner successfully implements imputation methods, he or she has no structured way to evaluate how well imputation performs or how imputation affects supervised models downstream built upon imputed data. Because handling missing data is quite complex, most statistical packages simply remove records with missing data so that machine learning models can execute. While this option is simple to implement and enables models to run, it generally comes with numerous undesirable side effects if data is not missing completely at random (MCAR). This subject is explored further in the background section of this paper. However, in practice, real-world data is rarely MCAR, so models should generally avoid discarding missing records. Extensions in software packages do exist to implement imputation methods automatically. That being said, the practitioner still must decide which method to implement, explain why an imputation method is optimal, and evaluate how the optimal imputation method affects models trained on imputed data. Research Purpose This research aids the machine learning practitioner by bringing more clarity to the imputation process, making imputation methods more accessible and comparable, and measuring the impact imputation methods have in supervised regression and classification models. This research strives to not just automate imputation but also develop an open-source framework to structure and evaluate imputation methods within a supervised machine learning process. To address this purpose, this research specifies four objectives: Assess the extent of the missing data problem with descriptive and visual measures Examine the factors related to the missingness of data Deploy imputation methods and select the most appropriate methodology Measure the impact of imputation to the fit, stability, bias, and variance of parameters derived from supervised models built on imputed data The researchers meet these objectives by developing an open-source Python package that can generalize across cross-sectional and time-series datasets. Any data science professional can deploy or reuse components of the package itself. Eventually, the researchers will accept contributions from the open source community as well. "],
["background.html", "Background Missing Data Mechanism Missing Data Methods for Single Imputation Multiple Imputation Missing Data and Autoimpute", " Background To understand imputation methods, one must first explore the reason they exist - missingness in data. Missingness covers values in a dataset that are either unobserved or unknown. For example, a weigh scale may generate missing values for three separate reasons. First, it might run out of batteries, in which case all weight reportings cease for a given period of time. Next, it may fail to report measurements with greater frequency for objects over a certain weight. And finally, it may stop reporting when placed on a soft surface instead of a hard one (Van Buuren, 2018, ch. 1.2). Missing Data Mechanism Each of the weigh scale examples results in missing data, but the underlying reason for the missingness is quite different. Donald Rubin describes the ways in which data can be missing. According to Rubin (as cited in Van Buuren, 2018, ch. 1.2), every observation in a dataset has some probability of being missing. The process that governs these probabilities is called the missing data mechanism (Rubin, as cited in Van Buuren, 2018, ch 1.2). As a process, the missing data mechanism generates a statistical relationship between observations and the probability of missing data (Nakagawa, 2015, Pg. 83). The missing data model is the function that explains that statistical relationship (Van Buuren, 2018). Statistical relationships falls into one of three categories, each of which represents a different missing data mechanism (Rubin, as cited in Van Buuren, 2018, ch. 1.2). MCAR, MAR, and MNAR Missing completely at random (MCAR) is the first of the three missing data mechanisms. MCAR assumes missing values in the underlying dataset have the same probability of missingness for all cases (Gelman &amp; Hill, 2017, Pg. 530). Thus, MCAR implies that the probability of missingness within a dataset is completely unrelated to the data in question or any other observed or unobserved data. From the example above, MCAR governs the probability of values being missing from a weigh scale that runs out of batteries at some point in time (Van Buuren, 2018, ch. 1.2). Although MCAR is convenient, datasets with missing values are often not MCAR in the real-world. Missing at random (MAR) is the second missing data mechanism. MAR occurs when the probability a given variable is missing depends on available and observed information only (Gelman &amp; Hill, 2017, p. 530). Therefore, MAR is a weaker and more general classification of missingness than MCAR (Allison, 2012). In the case of the weigh scale, MAR describes missing data that arises from the scale’s placement on hard or soft surfaces. If information about the surface (hard or soft) is fully observed for each attempted weight measurement, the probability of missing measurements then depends on available data - surface type - and thus falls under MAR (Van Buuren, 2018, ch. 1.2). Since MAR is a more general assumption than MCAR, it is more realistic to encounter in real-world datasets. Missing not at random (MNAR) is the final missing data mechanism. MNAR suggests data’s “probability of being missing varies for reasons that are unknown to us” (Van Buuren, 2018, ch. 1.2). When the weight of an object itself is to blame for a scale’s failure to report measurements, the underlying process is MNAR because the probability of weight being missing is related to weight itself (Van Buuren, 2018, ch. 1.2). Ignorability The missing data mechanism determines the assumptions one can make when handling missing data. The most important assumption is that of ignorability. Missingness is ignorable “if it is missing at random and the probability of a missingness does not depend on the missing information itself” (Introduction to SAS, 2017). Therefore, MCAR and MAR fit this definition and have ignorable missingness. On the other hand, MNAR is considered non-ignorable because one must account for not only the missingness in data but also why the data is missing. In the context of imputation, ignorability determines whether one can ignore the way in which data are missing prior to imputing missing data through an imputation model (Nakagawa, 2015, Pg. 85). As stated in Introduction to SAS, “the assumption of ignorability is needed for optimal estimation of missing information and is a required assumption” (2017). Thus, in practice, professionals generally begin with the MAR assumption when dealing with missing data because it is the most general missing data mechanism that satisfies ignorability. Missing Data Methods for Single Imputation Missing data mechanisms that satisfy ignorability provide the foundation for the missing data methods explored throughout this research. With an understanding of these concepts, one can now examine the methods built upon these assumptions. Methods for missing data fall into two broad categories - deletion and imputation. Deletion One of the most popular approaches data practitioners use when dealing with missing data is listwise deletion or complete-case analysis, which is the deletion of any observation that has at least one missing value in any feature (Van Buuren, 2018, ch. 1.3.1). Complete-case analysis (CCA) is relatively easy to implement and enables analysis models to run without generating errors that result from missing data. However, CCA also has its flaws. As Gelman &amp; Hill (2017) describe, two problems arise with CCA: If the units with missing values differ systematically from the completely observed cases, this could bias the complete-case analysis. If many variables are included in a model, there may be very few complete cases, so that most of the data would be discarded for the sake of a simple analysis. (p. 531) Imputation Because of these problems, researchers are cautious with listwise deletion and employ CCA as a benchmark or in specific cases where the effect from deletion is negligible. Instead, researchers turn to imputation in favor of deletion to solve for these challenges. “Imputation is a procedure for entering a value for a specific data item where the response is missing or unusable” (UNECE, 2000). Instead of discarding data, imputation retains potentially important information in the data by substituting missing values with plausible ones produced from an imputation model. While this process seems straightforward, numerous imputation options exist and range from quite simple methods to very complex models. Furthermore, no universal evaluation metric exists to judge the accuracy or success of an imputation technique. Because of these reasons, practitioners must fully understand the different imputation options available to them and perform imputation analysis to discern which method serves their use case to best meet their objectives. The next section explores the fundamentals behind different imputation methods and examines their respective strengths and weaknesses. In general, there are two major categories of imputation methods - univariate and multivariate. Univariate imputation techniques focus on a single incomplete variable known as the target variable (Van Buuren, 2018, ch. 3). Univariate methods utilize observed values in the target variable to determine how to fill in missing values in the same target. Mean imputation is a popular example of a univariate method. When applied, mean imputation takes the mean of the observed features within a target variable and imputes missing values with the mean. This imputation method extends to any descriptive statistic that one can calculate from the target variable’s observed data. Additional examples include median and mode imputation, which follow a similar process but use a different statistic for imputation. Univariate Univariate measures do not have to impute a single value. For example, linear interpolation employs linear curve fitting to construct new values as imputations between two observed data points. Therefore, imputations from linear interpolation depend upon the closest observed values, so the value of an imputation will differ from one portion of the data to another. The only requirement for univariate methods is that they use information contained within the observed values of the same variable they are designed to impute. Appendix B.1 goes into greater detail of all the univariate methods that the researchers support in Autoimpute. Multivariate The second major category of imputation methods is multivariate imputation. Multivariate imputation methods rely on one or more available features to predict plausible imputations for the target variable. When an imputation model has access to multiple features within a dataset, the method can preserve the relationships between the features and the target variable (Van Buuren, 2018, ch. 4.1). While this preservation is beneficial, it is not always clear which features one should use in a multivariate imputation model. In this case, the missing data pattern becomes useful to know. Van Buuren (2018) states: The missing data pattern influences the amount of information that can be transferred between variables. Imputation can be more precise if other variables are non-missing for those cases that are to be imputed. The reverse is also true. Predictors are potentially more powerful if they have are non-missing in rows that are vastly incomplete. (ch. 4.1.2) Since the missing data pattern shows how information can be transferred between variables, we can now calculate quantitative statistics to determine further how each variable connects to one another. Van Buuren (2018) names the first of these statistics Influx. The influx coefficient \\(I_j\\) is defined as: \\[I_j = \\frac{\\sum_j^p\\sum_k^p\\sum_i^n (1-r_{ij})r_{ik}}{\\sum_k^p\\sum_i^n r_{ik}}\\] Influx represents the number of variable pairs (\\(Y_j\\),\\(Y_k\\)) with \\(Y_j\\) missing and \\(Y_k\\) observed, divided by the total number of observed data points. Its value depends on the proportion of missing data of the variable, where \\(I_j=0\\) when a variable is completely observed and \\(I_j=1\\) when a variable is completely missing (Van Buuren, 2018, ch. 4.1.3). As Van Buuren notes, “for two variables with the same proportion of missing data, the variable with higher influx is better connected to the observed data, and might thus be easier to impute” (2018, ch. 4.1.3). Thus, influx is an important statistic to find as it can tell the practitioner which variables in the dataset are good candidates to be imputed using the other variables as predictors. Van Buuren (2018) names the next coefficient of interest Outflux. Outflux coefficient \\(O_j\\) is defined as: \\[O_j = \\frac{\\sum_j^p\\sum_k^p\\sum_i^n r_{ij}(1-r_{ik})}{\\sum_k^p\\sum_i^n 1-r_{ij}}\\] The outflux coefficient \\(O_j\\) is the number of variable pairs with (\\(Y_j\\),\\(Y_k\\)) with \\(Y_j\\) observed and \\(Y_k\\) missing, divided by the total number of incomplete data points. Its value indicates the potential usefulness of \\(Y_j\\) for imputing other variables. As with influx, outflux depends on the proportion of missing data of the variable. Unlike influx, \\(O_j=1\\) when a variable is completely observed, and \\(O_j=0\\) when a variable is completely missing (Van Buuren, 2018, ch. 4.1.3). Van Buuren describes outflux in a similar manner to influx: “For two variables having the same proportion of missing data, the variable with higher outflux is better connected to the missing data, and thus potentially more useful for imputing other variables” (ch. 4.1.3). Accordingly, outflux assists the practitioner in determining the variables that are potentially more useful as predictors when imputing missing value variables in a multivariate missing dataset. Practitioners use the above statistics to understand the importance of and relationships between variables in a dataset. Once the set of variables is identified, a multivariate imputation model can be specified, and predictions from that model fill in missing values. A few examples of multivariate imputation methods are: Linear and Logistic Regression Imputation Bayesian Regression Imputation Predictive Mean Matching (PMM) Local Residual Draws (LRD) Appendix B.2 provides more information regarding multivariate imputation methods available in Autoimpute and detail behind each method. Autoimpute implements regressions as seen in Van Buuren and implements PMM &amp; LRD as seen in Morris et. al. Multiple Imputation With univariate and multivariate imputation methods, practitioners now have the ability to impute missing values in a dataset. These methods impute missing values once, however, and provide a single point estimate - the imputation - for each missing value. Gelman &amp; Hill (2017) argue “whenever a single imputation strategy is used, the standard errors of estimates tend to be too low. The intuition here is that we have substantial uncertainty about the missing values, but by choosing a single imputation we in essence pretend that we know the true value with certainty” (p. 532). To account for this issue, researchers developed a procedure called multiple imputation. As noted in the Introduction to SAS: Multiple imputation is essentially an iterative form of stochastic imputation. However, instead of filling in a single value, the distribution of the observed data is used to estimate multiple values that reflect the uncertainty around the true value. These values are then used in the analysis of interest, such as in a OLS model, and the results combined. Each imputed value includes a random component whose magnitude reflects the extent to which other variables in the imputation model cannot predict it’s true values (Johnson and Young, 2011; White et al, 2010). Thus, building into the imputed values a level of uncertainty around the “truthfulness” of the imputed values. (2017) Therefore, multiple imputation provides a solution to the definite nature of single imputation point estimates. Specifically, multiple imputation includes three major steps in developing a multiply imputed datasets (Allison, 2012): Introduce random variation into the process of imputing missing values, and generate several data sets, each with slightly different imputed values. Perform an analysis on each of the data sets using the analysis model one would have used had the dataset been complete. Combine the results into a single set of parameter estimates, standard errors, and test statistics using parameter pooling techniques. Figure 1 below visualizes the workflow described in the three steps above (Van Buuren, 2018, ch. 1.4.1). Figure .: Multiple Imputation Workflow Based on the data, use-case, and desired outcome, practitioners should choose an imputation method that adds some random variation. Then multiple imputation results in multiple copies of imputed datasets with different imputed values. Each imputed dataset is analyzed separately and then parameters from those analyses are pooled together to get combined diagnostics on the performance of the multiple imputation process and the specified imputation model. This method “solves the standard error problem by calculating the variance of each parameter estimate across the several data sets” (Allison, 2012). The pooled parameters replace those from the supervised machine learning model of interest. The pooled parameters not only produce the coefficient estimate but also the properly account for the increase in standard error due to uncertainty introduced from imputing missing data. Missing Data and Autoimpute Ultimately, this background details the concepts and theory that are the foundation for the Autoimpute package. Understanding the process that generates missingness in a dataset - the missing data mechanism - is imperative prior to applying any deletion or imputation method. The missing data mechanism and missing data pattern should inform which strategy to use to handle missing data. At that point, the researcher performs either univariate or multivariate imputation using the method that fits best a given dataset, use case, or goal. If the researcher is interested in analysis, then he or she should deploy the selected imputation method in multiple imputations. Each imputed dataset within the multiple imputation framework can then be analyzed separately with the supervised learning model of interest. Finally, the researcher can pool parameters together to produce parameters of the multiply imputed analysis model and use this model to make predictions when new data arrives. Anyone interested can utilize Autoimpute, the Python package created by the authors, to perform all of the steps described above. The next section discusses how to use Autoimpute from end-to-end to explore and analyze missing data. It also demonstrates the impact different missing data mechanisms have on the results produced from multiple imputation and subsequent analysis. All results are generated using the Autoimpute package. "],
["methodology.html", "Methodology Autoimpute: an End-to-End Example", " Methodology This research provides an end-to-end framework for missing data and imputation analysis. Its primary concern is on the nature of missingness as well as the impact of missingness on imputation methods and analytical models downstream. In the first half of this section, the researchers demonstrate an end-to-end methodology for analyzing a dataset with missing values using the Autoimpute package. This approach demonstrates how the package accomplishes the four objectives listed in the research purpose. After the end-to-end analysis, the researchers explore further one of the primary concerns in missing data - the nature of missingness. Thus, this methodology showcases the comprehensive nature of the Autoimpute package and demonstrates the impact of the nature of missingness on a practitioner’s analysis. Autoimpute: an End-to-End Example 0.0.1 Overview and Description The methodology starts by simulating a dataset with no missingness. A simple linear regression is performed on this simulated dataset and its coefficients are stored as benchmarks for comparison of all future analysis models. Then, the researchers introduce MCAR missingness in only the predictors of this simulated dataset. This dataset with missing values becomes the source of truth for deletion and imputation methods described below. The researchers then explore missingness patterns within the dataset. After exploration, they employ complete-case analysis or listwise deletion, which is the deletion of all observations with missing values as described in the background section. Following this procedure, they use the MCAR missing value dataset to create imputed datasets based on a number of imputation methods. They use univariate imputation methods including mean imputation and multivariate methods including least squares and predictive mean matching. They then run the processed missing value datasets through a simple linear regression and gather the respective coefficients and feature variance for comparison. Lastly, they compare the results to see the impact of deletion and imputation on the analytical model under the circumstances described in the first paragraph (MCAR missingness in predictors, no missingness in response). "],
["findings.html", "Findings Results of descriptive analyses Modeling results Results of model performance and validation", " Findings Should be organized as follows: Results of descriptive analyses Modeling results Results of model performance and validation Results of descriptive analyses kable(summary(ToothGrowth), align = &quot;r&quot;, caption = &quot;Summary of ToothGrowth data&quot;, format = &quot;latex&quot;, longtable = TRUE) Table ?? above contains summary statistics of the Tooth Growth data. While the code is not displayed to create the graph below (echo=FALSE), it is displayed in the Appendix by referencing the boxplot chunk name.. Figure .: Avg. length by supplement and dose Figure . was created with the ggplot2 package. We can visually compare the average tooth growth by supplement and dose. Modeling results First, use a t.test() to test if dosage leads to growth of incisor length. From the results below, it appears every test rejects the null hypothesis. test1 &lt;- t.test(length ~ dose, ToothGrowth, dose %in% c(0.5,1)) test2 &lt;- t.test(length ~ dose, ToothGrowth, dose %in% c(0.5,2)) test3 &lt;- t.test(length ~ dose, ToothGrowth, dose %in% c(1,2)) testAgg &lt;- data.frame(Name = c(&quot;Test 0.5-1&quot;, &quot;Test 0.5-2&quot;, &quot;Test 1-2&quot;), Method = c(test1$method, test2$method, test3$method), Pvalue = c(test1$p.value, test2$p.value, test3$p.value), Tstat = c(test1$statistic, test2$statistic, test3$statistic)) kable(testAgg, digit = 7, align = &quot;r&quot;, caption = &quot;t-test results&quot;, format = &quot;latex&quot;, longtable = TRUE) Table ?? Results of model performance and validation Next, subset the ToothGrowth data into seperate data sets defined by supplement dose of 0.5, 1, and 2 mg. This allow us to controlling for dose increases of economic significance. Subset tooth data into a separate data.frame for each dosage level. Then Execute the t.test() function for the dosage of 0.5 mg and display the results. dose05 &lt;- ToothGrowth[ToothGrowth$dose == 0.5, ] dose1 &lt;- ToothGrowth[ToothGrowth$dose == 1, ] dose2 &lt;- ToothGrowth[ToothGrowth$dose == 2, ] test4 &lt;- t.test(length ~ supplement, data = dose05) test5 &lt;- t.test(length ~ supplement, data = dose1) test6 &lt;- t.test(length ~ supplement, data = dose2) Place the results of the analysis directly into your content with inline code functions: With a very low p-value of 0.0064 and a corresponding t-statistic of 3.1697, it appears that at low doses, Orange Juice is the preferable delivery mechanism to Vitamin C for Ascorbic Acid delivery. The p-value and t-statistic above have been directly extracted from the model object and printed inline. using the ‘r foo’ syntax with quotes(’) replaced by back-ticks (`). "],
["conclusion.html", "Conclusion", " Conclusion This section includes a concise summary of the findings. Your summary might be organized by the research objectives or hypotheses. Make sure you address the extent to which research objectives are achieved, and if they are not achieved, explain why. Make sure to interpret your findings in a way that acknowledges the limitations of the research. That is, do not extrapolate the insights derived from your research to situations you have not examined. While increasing dosage leads to larger incisor length, the choice of delivery mechanism between Orange Juice and Vitamin C does not seem to make a difference. However, at very low levels, Orange Juice appears more effective, displaying higher average growth. "],
["recommendations.html", "Recommendations", " Recommendations Includes guidelines as to ways in which your results should or could be used in practice. You may discuss other uses of your results, if there are any. The ways to extend your analysis and the benefits of doing so might be included in this section as well. If you feel it necessary to include an appendix, it goes here. --> "],
["A-the-first-appendix.html", "A The First Appendix", " A The First Appendix This first appendix includes all of the R chunks of code that were hidden throughout the document (using the include = FALSE chunk tag) to help with readibility and/or setup. In section ??: In section ??: data(ToothGrowth) colnames(ToothGrowth) &lt;- c(&quot;length&quot;, &quot;supplement&quot;, &quot;dose&quot;) ToothGrowth$dose &lt;- as.factor(ToothGrowth$dose) groupedTooth &lt;- aggregate(ToothGrowth, by=ToothGrowth[,2:3], FUN=mean)[,1:3] library(ggplot2) ggplot(ToothGrowth, aes(x = supplement, y = length)) + geom_boxplot(aes(fill=supplement)) + facet_wrap(~dose) + guides(colour = guide_legend(&quot;Color = Supplement&quot;)) + labs(x=&quot;Orange Juice or Vitamin C, grouped by dose&quot;, y=&quot;Odontoblast Growth (microns)&quot;) + theme_bw() "],
["B-a-second-appendix-for-example.html", "B A Second Appendix, for example", " B A Second Appendix, for example "],
["references.html", "References", " References There are a variety of tools available for creating a bibliography database (stored with the .bib extension). In addition to BibTeX suggested below, you may want to consider using the free and easy-to-use tool called Zotero. R Markdown uses pandoc (http://pandoc.org/) to build its bibliographies. To cite references in your thesis (after creating your bibliography database), place the reference name inside square brackets and precede it by the “at” symbol. For example, here’s a reference to a book about worrying: (Molina &amp; Borkovec, 1994). This Molina1994 entry appears in a file called thesis.bib in the bib folder. This bibliography database file was created by a program called BibTeX. You can call this file something else if you like (look at the YAML header in the main .Rmd file) and, by default, is to placed in the bib folder. Additional Tips The sooner you start compiling your bibliography for something as large as a capstone, the better. Typing in source after source is mind-numbing enough; do you really want to do it for hours on end at the last minute? The cite key (a citation’s label) needs to be unique from the other entries. When you have more than one author or editor, you need to separate each author’s name by the word “and” e.g. Author = {Noble, Sam and Youngberg, Jessica}, Example output generated from bib file "]
]
